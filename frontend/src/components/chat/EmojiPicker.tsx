import { useState, useRef, useEffect } from "react";
import styles from "./EmojiPicker.module.css";
import { FixedSizeGrid as Grid, GridChildComponentProps } from "react-window";

const EMOJI_SIZE = 40; // Size of each emoji cell
const COLUMNS = 8; // Number of columns in the grid

const emojiCategories = {
	smileys: [
		"😀",
		"😃",
		"😄",
		"😁",
		"😆",
		"😅",
		"😂",
		"🤣",
		"😊",
		"😇",
		"🙂",
		"🙃",
		"😉",
		"😌",
		"😍",
		"🥰",
		"😘",
		"😗",
		"😙",
		"😚",
		"😋",
		"😛",
		"😝",
		"😜",
		"🤪",
		"🤨",
		"🧐",
		"🤓",
		"😎",
		"🥸",
		"🤩",
		"🥳",
		"😏",
		"😒",
		"😞",
		"😔",
		"😟",
		"😕",
		"🙁",
		"☹️",
		"😣",
		"😖",
		"😫",
		"😩",
		"🥺",
		"😢",
		"😭",
		"😤",
		"😠",
		"😡",
		"🤬",
		"🤯",
		"😳",
		"🥵",
		"🥶",
		"😱",
		"😨",
		"😰",
		"😥",
		"😓",
		"🤗",
		"🤔",
		"🤭",
		"🤫",
		"🤥",
		"😶",
		"😐",
		"😑",
		"😬",
		"🙄",
		"😯",
		"😦",
		"😧",
		"😮",
		"😲",
		"🥱",
		"😴",
		"🤤",
		"😪",
		"😵",
		"🤐",
		"🥴",
		"🤢",
		"🤮",
		"🤧",
		"😷",
		"🤒",
		"🤕",
		"🤑",
		"🤠",
		"😈",
		"👿",
		"👹",
		"👺",
		"🤡",
		"💩",
		"👻",
		"💀",
		"☠️",
		"👽",
		"👾",
		"🤖",
		"🎃",
		"😺",
		"😸",
		"😹",
		"😻",
		"😼",
		"😽",
		"🙀",
		"😿",
		"😾",
	],
	animals: [
		"🐶",
		"🐱",
		"🐭",
		"🐹",
		"🐰",
		"🦊",
		"🐻",
		"🐼",
		"🐻‍❄️",
		"🐨",
		"🐯",
		"🦁",
		"🐮",
		"🐷",
		"🐽",
		"🐸",
		"🐵",
		"🙈",
		"🙉",
		"🙊",
		"🐒",
		"🐔",
		"🐧",
		"🐦",
		"🐤",
		"🐣",
		"🐥",
		"🦆",
		"🦅",
		"🦉",
		"🦇",
		"🐺",
		"🐗",
		"🐴",
		"🦄",
		"🐝",
		"🪱",
		"🐛",
		"🦋",
		"🐌",
		"🐞",
		"🐜",
		"🪰",
		"🪲",
		"🪳",
		"🦟",
		"🦗",
		"🕷️",
		"🦂",
		"🐢",
		"🐍",
		"🦎",
		"🦖",
		"🦕",
		"🐙",
		"🦑",
		"🦐",
		"🦞",
		"🦀",
		"🐡",
		"🐠",
		"🐟",
		"🐬",
		"🐳",
		"🐋",
		"🦈",
		"🐊",
		"🐅",
		"🐆",
		"🦓",
		"🦍",
		"🦧",
		"🦣",
		"🐘",
		"🦛",
		"🦏",
		"🐪",
		"🐫",
		"🦒",
		"🦘",
		"🦬",
		"🐃",
		"🐂",
		"🐄",
		"🐎",
		"🐖",
		"🐏",
		"🐑",
		"🦙",
		"🐐",
		"🦌",
		"🐕",
		"🐩",
		"🦮",
		"🐕‍🦺",
		"🐈",
		"🐈‍⬛",
		"🪶",
		"🐓",
		"🦃",
		"🦤",
		"🦚",
		"🦜",
		"🦢",
		"🦩",
		"🕊️",
		"🐇",
		"🦝",
		"🦨",
		"🦡",
		"🦫",
		"🦦",
		"🦥",
		"🐁",
		"🐀",
		"🐿️",
		"🦔",
	],
	objects: [
		"💍",
		"💎",
		"🔪",
		"🪓",
		"🧨",
		"💣",
		"🔫",
		"🪃",
		"🏹",
		"🛡️",
		"🔧",
		"🔨",
		"🪛",
		"🔩",
		"⚙️",
		"🧱",
		"⛓️",
		"🧲",
		"🔫",
		"💉",
		"🩸",
		"💊",
		"🩹",
		"🩺",
		"🚪",
		"🪑",
		"🛏️",
		"🛋️",
		"🪟",
		"🪞",
		"🛍️",
		"🛒",
		"🎁",
		"🎈",
		"🎏",
		"🎀",
		"🎊",
		"🎉",
		"🎎",
		"🏮",
		"🪔",
		"🧧",
		"✉️",
		"📩",
		"📨",
		"📧",
		"💌",
		"📥",
		"📤",
		"📦",
		"🏷️",
		"📪",
		"📫",
		"📬",
		"📭",
		"📮",
		"📯",
		"📜",
		"📃",
		"📄",
		"📑",
		"🧾",
		"📊",
		"📈",
		"📉",
		"📅",
		"📆",
		"🗓️",
		"📇",
		"🗃️",
		"🗳️",
		"🗄️",
		"📋",
		"📁",
		"📂",
		"🗂️",
		"🗒️",
		"🗓️",
		"📒",
		"📔",
		"📕",
		"📗",
		"📘",
		"📙",
		"📚",
		"📓",
		"📖",
		"🧷",
		"🔖",
		"🏷️",
		"💰",
		"🪙",
		"💴",
		"💵",
		"💶",
		"💷",
		"💸",
		"💳",
		"🧾",
		"💹",
		"✂️",
		"🖊️",
		"🖋️",
		"✒️",
		"🖌️",
		"🖍️",
		"📝",
		"✏️",
		"🔍",
		"🔎",
		"🔏",
		"🔐",
		"🔒",
		"🔓",
	],
	symbols: [
		"❤️",
		"🧡",
		"💛",
		"💚",
		"💙",
		"💜",
		"🤎",
		"🖤",
		"🤍",
		"💔",
		"❣️",
		"💕",
		"💞",
		"💓",
		"💗",
		"💖",
		"💘",
		"💝",
		"💟",
		"☮️",
		"✝️",
		"☪️",
		"🕉️",
		"☸️",
		"✡️",
		"🔯",
		"🕎",
		"☯️",
		"☦️",
		"🛐",
		"⛎",
		"♈",
		"♉",
		"♊",
		"♋",
		"♌",
		"♍",
		"♎",
		"♏",
		"♐",
		"♑",
		"♒",
		"♓",
		"🆔",
		"⚛️",
		"🉑",
		"☢️",
		"☣️",
		"📴",
		"📳",
		"🈶",
		"🈚",
		"🈸",
		"🈺",
		"🈷️",
		"✴️",
		"🆚",
		"💮",
		"🉐",
		"㊙️",
		"㊗️",
		"🈴",
		"🈵",
		"🈹",
		"🈲",
		"🅰️",
		"🅱️",
		"🆎",
		"🆑",
		"🅾️",
		"🆘",
		"❌",
		"⭕",
		"🛑",
		"⛔",
		"📛",
		"🚫",
		"💯",
		"💢",
		"♨️",
		"🚷",
		"🚯",
		"🚳",
		"🚱",
		"🔞",
		"📵",
		"🚭",
		"❗",
		"❕",
		"❓",
		"❔",
		"‼️",
		"⁉️",
		"🔅",
		"🔆",
		"〽️",
		"⚠️",
		"🚸",
		"🔱",
		"⚜️",
		"🔰",
		"♻️",
		"✅",
		"🈯",
		"💹",
		"❇️",
		"✳️",
		"❎",
		"🌐",
		"💠",
		"Ⓜ️",
		"🌀",
		"💤",
		"🏧",
		"🚾",
		"♿",
		"🅿️",
		"🈳",
		"🈂️",
		"🛂",
		"🛃",
		"🛄",
		"🛅",
		"🚹",
		"🚺",
		"🚼",
		"🚻",
		"🚮",
		"🎦",
		"📶",
		"🈁",
		"🔣",
		"ℹ️",
		"🔤",
		"🔡",
		"🔠",
		"🆖",
		"🆗",
		"🆙",
		"🆒",
		"🆕",
		"🆓",
		"0️⃣",
		"1️⃣",
		"2️⃣",
		"3️⃣",
		"4️⃣",
		"5️⃣",
		"6️⃣",
		"7️⃣",
		"8️⃣",
		"9️⃣",
		"🔟",
		"🔢",
		"#️⃣",
		"*️⃣",
		"⏏️",
		"▶️",
		"⏸",
		"⏯",
		"⏹",
		"⏺",
		"⏭",
		"⏮",
		"⏩",
		"⏪",
		"⏫",
		"⏬",
		"◀️",
		"🔼",
		"🔽",
		"➡️",
		"⬅️",
		"⬆️",
		"⬇️",
		"↗️",
		"↘️",
		"↙️",
		"↖️",
		"↕️",
		"↔️",
		"↪️",
		"↩️",
		"⤴️",
		"⤵️",
		"🔀",
		"🔁",
		"🔂",
		"🔄",
		"🔃",
		"🎵",
		"🎶",
		"➕",
		"➖",
		"➗",
		"✖️",
		"♾️",
		"💲",
		"💱",
		"™️",
		"©️",
		"®️",
		"〰️",
		"➰",
		"➿",
		"🔚",
		"🔙",
		"🔛",
		"🔝",
		"🔜",
		"✔️",
		"☑️",
		"🔘",
		"🔴",
		"🟠",
		"🟡",
		"🟢",
		"🔵",
		"🟣",
		"⚫",
		"⚪",
		"🟤",
		"🔺",
		"🔻",
		"🔸",
		"🔹",
		"🔶",
		"🔷",
		"🔳",
		"🔲",
		"▪️",
		"▫️",
		"◾",
		"◽",
		"◼️",
		"◻️",
		"🟥",
		"🟧",
		"🟨",
		"🟩",
		"🟦",
		"🟪",
		"⬛",
		"⬜",
		"🟫",
		"🔈",
		"🔇",
		"🔉",
		"🔊",
		"🔔",
		"🔕",
		"📣",
		"📢",
		"👁️‍🗨️",
		"💬",
		"💭",
		"🗯️",
		"♠️",
		"♣️",
		"♥️",
		"♦️",
		"🃏",
		"🎴",
		"🀄",
		"🕐",
		"🕑",
		"🕒",
		"🕓",
		"🕔",
		"🕕",
		"🕖",
		"🕗",
		"🕘",
		"🕙",
		"🕚",
		"🕛",
		"🕜",
		"🕝",
		"🕞",
		"🕟",
		"🕠",
		"🕡",
		"🕢",
		"🕣",
		"🕤",
		"🕥",
		"🕦",
		"🕧",
	],
	food: [
		"🍏",
		"🍎",
		"🍐",
		"🍊",
		"🍋",
		"🍌",
		"🍉",
		"🍇",
		"🍓",
		"🫐",
		"🍈",
		"🍒",
		"🍑",
		"🥭",
		"🍍",
		"🥥",
		"🥝",
		"🍅",
		"🍆",
		"🥑",
		"🥦",
		"🥬",
		"🥒",
		"🌶️",
		"🫑",
		"🌽",
		"🥕",
		"🫒",
		"🧄",
		"🧅",
		"🥔",
		"🍠",
		"🥐",
		"🥯",
		"🍞",
		"🥖",
		"🥨",
		"🧀",
		"🥚",
		"🍳",
		"🧈",
		"🥞",
		"🧇",
		"🥓",
		"🥩",
		"🍗",
		"🍖",
		"🦴",
		"🌭",
		"🍔",
		"🍟",
		"🍕",
		"🫓",
		"🥪",
		"🥙",
		"🧆",
		"🌮",
		"🌯",
		"🫔",
		"🥗",
		"🥘",
		"🫕",
		"🥫",
		"🍝",
		"🍜",
		"🍲",
		"🍛",
		"🍣",
		"🍱",
		"🥟",
		"🦪",
		"🍤",
		"🍙",
		"🍚",
		"🍘",
		"🍥",
		"🥠",
		"🥮",
		"🍢",
		"🍡",
		"🍧",
		"🍨",
		"🍦",
		"🥧",
		"🧁",
		"🍰",
		"🎂",
		"🍮",
		"🍭",
		"🍬",
		"🍫",
		"🍿",
		"🍩",
		"🍪",
		"🌰",
		"🥜",
		"🫘",
		"🍯",
	],
	travel: [
		"🚗",
		"🚕",
		"🚙",
		"🚌",
		"🚎",
		"🏎️",
		"🚓",
		"🚑",
		"🚒",
		"🚐",
		"🛻",
		"🚚",
		"🚛",
		"🚜",
		"🦯",
		"🦽",
		"🦼",
		"🛴",
		"🚲",
		"🛵",
		"🏍️",
		"🛺",
		"🚨",
		"🚔",
		"🚍",
		"🚘",
		"🚖",
		"🚡",
		"🚠",
		"🚟",
		"🚃",
		"🚋",
		"🚞",
		"🚝",
		"🚄",
		"🚅",
		"🚈",
		"🚂",
		"🚆",
		"🚇",
		"🚊",
		"🚉",
		"✈️",
		"🛫",
		"🛬",
		"🛩️",
		"💺",
		"🛰️",
		"🚀",
		"🛸",
		"🚁",
		"🛶",
		"⛵",
		"🚤",
		"🛥️",
		"🛳️",
		"⛴️",
		"🚢",
		"⚓",
		"🛟",
		"🚧",
		"⛽",
		"🚏",
		"🚦",
		"🚥",
		"🗺️",
		"🗿",
		"🗽",
		"🗼",
		"🏰",
		"🏯",
		"🏟️",
		"🎡",
		"🎢",
		"🎠",
		"⛲",
		"⛱️",
		"🏖️",
		"🏝️",
		"🏜️",
		"🌋",
		"⛰️",
		"🏔️",
		"🗻",
		"🏕️",
		"⛺",
		"🛖",
		"🏠",
		"🏡",
		"🏘️",
		"🏚️",
		"🏗️",
		"🏭",
		"🏢",
		"🏬",
		"🏣",
		"🏤",
		"🏥",
		"🏦",
		"🏨",
		"🏪",
		"🏫",
		"🏩",
		"💒",
		"🏛️",
		"⛪",
		"🕌",
		"🛕",
		"🕍",
		"⛩️",
		"🕋",
		"⛲",
		"🎪",
		"🎭",
		"🖼️",
		"🎨",
		"🧵",
		"🪡",
		"🧶",
		"🪢",
		"👓",
		"🕶️",
		"🥽",
		"🥼",
		"🦺",
		"👔",
		"👕",
		"👖",
		"🧣",
		"🧤",
		"🧥",
		"🧦",
		"👗",
		"👘",
		"🥻",
		"🩱",
		"🩲",
		"🩳",
		"👙",
		"👚",
		"👛",
		"👜",
		"👝",
		"🎒",
		"🩴",
		"👞",
		"👟",
		"🥾",
		"🥿",
		"👠",
		"👡",
		"🩰",
		"👢",
		"👑",
		"👒",
		"🎩",
		"🎓",
		"🧢",
		"🪖",
		"⛑️",
		"💄",
		"💍",
		"💼",
	],
	flags: [
		"🏳️",
		"🏴",
		"🏴‍☠️",
		"🏁",
		"🚩",
		"🏳️‍⚧️",
		"🇦🇫",
		"🇦🇽",
		"🇦🇱",
		"🇩🇿",
		"🇦🇸",
		"🇦🇩",
		"🇦🇴",
		"🇦🇮",
		"🇦🇶",
		"🇦🇬",
		"🇦🇷",
		"🇦🇲",
		"🇦🇼",
		"🇦🇺",
		"🇦🇹",
		"🇦🇿",
		"🇧🇸",
		"🇧🇭",
		"🇧🇩",
		"🇧🇪",
		"🇧🇿",
		"🇧🇯",
		"🇧🇲",
		"🇧🇹",
		"🇧🇴",
		"🇧🇦",
		"🇧🇼",
		"🇧🇷",
		"🇮🇴",
		"🇻🇬",
		"🇧🇳",
		"🇧🇬",
		"🇧🇫",
		"🇧🇮",
		"🇨🇻",
		"🇰🇭",
		"🇨🇲",
		"🇨🇦",
		"🇮🇨",
		"🇨🇫",
		"🇹🇩",
		"🇨🇱",
		"🇨🇳",
		"🇨🇽",
		"🇨🇨",
		"🇨🇴",
		"🇰🇲",
		"🇨🇬",
		"🇨🇩",
		"🇨🇰",
		"🇨🇷",
		"🇨🇮",
		"🇭🇷",
		"🇨🇺",
		"🇨🇼",
		"🇨🇾",
		"🇨🇿",
		"🇩🇰",
		"🇩🇯",
		"🇩🇲",
		"🇩🇴",
		"🇪🇨",
		"🇪🇬",
		"🇸🇻",
		"🇬🇶",
		"🇪🇷",
		"🇪🇪",
		"🇸🇿",
		"🇪🇹",
		"🇪🇺",
		"🇫🇰",
		"🇫🇴",
		"🇫🇯",
		"🇫🇮",
		"🇫🇷",
		"🇬🇫",
		"🇵🇫",
		"🇹🇫",
		"🇬🇦",
		"🇬🇲",
		"🇬🇪",
		"🇩🇪",
		"🇬🇭",
		"🇬🇮",
		"🇬🇷",
		"🇬🇱",
		"🇬🇩",
		"🇬🇵",
		"🇬🇺",
		"🇬🇹",
		"🇬🇬",
		"🇬🇳",
		"🇬🇼",
		"🇬🇾",
		"🇭🇹",
		"🇭🇳",
		"🇭🇰",
		"🇭🇺",
		"🇮🇸",
		"🇮🇳",
		"🇮🇩",
		"🇮🇷",
		"🇮🇶",
		"🇮🇪",
		"🇮🇲",
		"🇮🇱",
		"🇮🇹",
		"🇯🇲",
		"🇯🇵",
		"🎌",
		"🇯🇪",
		"🇯🇴",
		"🇰🇿",
		"🇰🇪",
		"🇰🇮",
		"🇽🇰",
		"🇰🇼",
		"🇰🇬",
		"🇱🇦",
		"🇱🇻",
		"🇱🇧",
		"🇱🇸",
		"🇱🇷",
		"🇱🇾",
		"🇱🇮",
		"🇱🇹",
		"🇱🇺",
		"🇲🇴",
		"🇲🇬",
		"🇲🇼",
		"🇲🇾",
		"🇲🇻",
		"🇲🇱",
		"🇲🇹",
		"🇲🇭",
		"🇲🇶",
		"🇲🇷",
		"🇲🇺",
		"🇾🇹",
		"🇲🇽",
		"🇫🇲",
		"🇲🇩",
		"🇲🇨",
		"🇲🇳",
		"🇲🇪",
		"🇲🇸",
		"🇲🇦",
		"🇲🇿",
		"🇲🇲",
		"🇳🇦",
		"🇳🇷",
		"🇳🇵",
		"🇳🇱",
		"🇳🇨",
		"🇳🇿",
		"🇳🇮",
		"🇳🇪",
		"🇳🇬",
		"🇳🇺",
		"🇳🇫",
		"🇰🇵",
		"🇲🇰",
		"🇲🇵",
		"🇳🇴",
		"🇴🇲",
		"🇵🇰",
		"🇵🇼",
		"🇵🇸",
		"🇵🇦",
		"🇵🇬",
		"🇵🇾",
		"🇵🇪",
		"🇵🇭",
		"🇵🇳",
		"🇵🇱",
		"🇵🇹",
		"🇵🇷",
		"🇶🇦",
		"🇷🇪",
		"🇷🇴",
		"🇷🇺",
		"🇷🇼",
		"🇼🇸",
		"🇸🇲",
		"🇸🇦",
		"🇸🇳",
		"🇷🇸",
		"🇸🇨",
		"🇸🇱",
		"🇸🇬",
		"🇸🇽",
		"🇸🇰",
		"🇸🇮",
		"🇬🇸",
		"🇸🇧",
		"🇸🇴",
		"🇿🇦",
		"🇰🇷",
		"🇸🇸",
		"🇪🇸",
		"🇱🇰",
		"🇧🇱",
		"🇸🇭",
		"🇰🇳",
		"🇱🇨",
		"🇵🇲",
		"🇻🇨",
		"🇸🇩",
		"🇸🇷",
		"🇸🇪",
		"🇨🇭",
		"🇸🇾",
		"🇹🇼",
		"🇹🇯",
		"🇹🇿",
		"🇹🇭",
		"🇹🇱",
		"🇹🇬",
		"🇹🇰",
		"🇹🇴",
		"🇹🇹",
		"🇹🇳",
		"🇹🇷",
		"🇹🇲",
		"🇹🇨",
		"🇹🇻",
		"🇻🇮",
		"🇺🇬",
		"🇺🇦",
		"🇦🇪",
		"🇬🇧",
		"🏴󠁧󠁢󠁥󠁮󠁧󠁿",
		"🏴󠁧󠁢󠁳󠁣󠁴󠁿",
		"🏴󠁧󠁢󠁷󠁬󠁳󠁿",
		"🇺🇸",
		"🇺🇾",
		"🇺🇿",
		"🇻🇺",
		"🇻🇦",
		"🇻🇪",
		"🇻🇳",
		"🇼🇫",
		"🇪🇭",
		"🇾🇪",
		"🇿🇲",
		"🇿🇼",
	],
};

interface EmojiPickerProps {
	onSelect: (emoji: string) => void;
	onClose: () => void;
}

const EmojiPicker: React.FC<EmojiPickerProps> = ({ onSelect, onClose }) => {
	const [search, setSearch] = useState("");
	const [recentEmojis, setRecentEmojis] = useState<string[]>([]);
	const pickerRef = useRef<HTMLDivElement>(null);

	// Load recently used emojis from localStorage
	useEffect(() => {
		const savedEmojis = localStorage.getItem("recentEmojis");
		if (savedEmojis) {
			setRecentEmojis(JSON.parse(savedEmojis));
		}
	}, []);

	// Save recently used emojis to localStorage
	const handleSelect = (emoji: string) => {
		onSelect(emoji);
		const updatedRecentEmojis = [
			emoji,
			...recentEmojis.filter((e) => e !== emoji).slice(0, 9), // Keep only the last 10
		];
		setRecentEmojis(updatedRecentEmojis);
		localStorage.setItem(
			"recentEmojis",
			JSON.stringify(updatedRecentEmojis)
		);
	};

	// Close picker when clicking outside
	useEffect(() => {
		const handleClickOutside = (event: MouseEvent) => {
			if (
				pickerRef.current &&
				!pickerRef.current.contains(event.target as Node)
			) {
				onClose();
			}
		};
		document.addEventListener("mousedown", handleClickOutside);
		return () =>
			document.removeEventListener("mousedown", handleClickOutside);
	}, [onClose]);

	// Filter emojis based on search
	const filteredEmojis = Object.entries(emojiCategories).reduce(
		(acc, [category, emojis]) => {
			const filtered = emojis.filter((emoji) => emoji.includes(search));
			if (filtered.length > 0) acc[category] = filtered;
			return acc;
		},
		{} as Record<string, string[]>
	);

	// Get all items (categories + emojis) for the grid
	const getCategoryData = () => {
		const items: Array<{ type: "category" | "emoji"; content: string }> =
			[];

		if (recentEmojis.length > 0) {
			items.push({ type: "category", content: "RECENTLY USED" });
			items.push(
				...recentEmojis.map((emoji) => ({
					type: "emoji" as const,
					content: emoji,
				}))
			);
		}

		Object.entries(filteredEmojis).forEach(([category, emojis]) => {
			items.push({ type: "category" as const, content: category });
			items.push(
				...emojis.map((emoji) => ({
					type: "emoji" as const,
					content: emoji,
				}))
			);
		});

		return items;
	};

	const allItems = getCategoryData();
	const ROWS = Math.ceil(allItems.length / COLUMNS);

	const Cell = ({
		columnIndex,
		rowIndex,
		style,
	}: GridChildComponentProps) => {
		const index = rowIndex * COLUMNS + columnIndex;
		const item = allItems[index];

		if (!item) return null;

		return item.type === "category" ? (
			<div
				style={{
					...style,
					width: `calc(100% - 20px)`, // Match picker width
					left: 10, // Align with container padding
					position: "absolute",
				}}
				className={styles.categoryTitle}>
				{item.content.toUpperCase()}
			</div>
		) : (
			<span
				style={{
					...style,
					width: `${EMOJI_SIZE}px !important`, // Force fixed width
				}}
				className={styles.emojiItem}
				onClick={() => handleSelect(item.content)}>
				{item.content}
			</span>
		);
	};
	return (
		<div ref={pickerRef} className={styles.emojiPicker}>
			<input
				type="text"
				placeholder="Search emoji..."
				className={styles.searchInput}
				value={search}
				onChange={(e) => setSearch(e.target.value)}
			/>
			<Grid
				className={styles.gridWrapper}
				columnCount={COLUMNS}
				columnWidth={EMOJI_SIZE}
				rowCount={ROWS}
				rowHeight={EMOJI_SIZE}
				height={300}
				width={EMOJI_SIZE * COLUMNS + 20} // Account for scrollbar
			>
				{Cell}
			</Grid>
		</div>
	);
};

export default EmojiPicker;
